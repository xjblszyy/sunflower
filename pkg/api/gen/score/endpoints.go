// Code generated by goa v3.4.2, DO NOT EDIT.
//
// Score endpoints
//
// Command:
// $ goa gen sunflower/pkg/api/design -o pkg/api/

package score

import (
	"context"
	"io"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "Score" service endpoints.
type Endpoints struct {
	Upload      goa.Endpoint
	ScoreList   goa.Endpoint
	ScoreDetail goa.Endpoint
}

// UploadRequestData holds both the payload and the HTTP request body reader of
// the "Upload" method.
type UploadRequestData struct {
	// Payload is the method payload.
	Payload *UploadPayload
	// Body streams the HTTP request body.
	Body io.ReadCloser
}

// NewEndpoints wraps the methods of the "Score" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Upload:      NewUploadEndpoint(s),
		ScoreList:   NewScoreListEndpoint(s),
		ScoreDetail: NewScoreDetailEndpoint(s),
	}
}

// Use applies the given middleware to all the "Score" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Upload = m(e.Upload)
	e.ScoreList = m(e.ScoreList)
	e.ScoreDetail = m(e.ScoreDetail)
}

// NewUploadEndpoint returns an endpoint function that calls the method
// "Upload" of service "Score".
func NewUploadEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		ep := req.(*UploadRequestData)
		return s.Upload(ctx, ep.Payload, ep.Body)
	}
}

// NewScoreListEndpoint returns an endpoint function that calls the method
// "ScoreList" of service "Score".
func NewScoreListEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ScoreListPayload)
		return s.ScoreList(ctx, p)
	}
}

// NewScoreDetailEndpoint returns an endpoint function that calls the method
// "ScoreDetail" of service "Score".
func NewScoreDetailEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ScoreDetailPayload)
		return s.ScoreDetail(ctx, p)
	}
}
