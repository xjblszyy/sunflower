// Code generated by goa v3.4.2, DO NOT EDIT.
//
// Score gRPC client CLI support package
//
// Command:
// $ goa gen sunflower/pkg/api/design -o pkg/api/

package client

import (
	"encoding/json"
	"fmt"
	scorepb "sunflower/pkg/api/gen/grpc/score/pb"
	score "sunflower/pkg/api/gen/score"
)

// BuildScoreListPayload builds the payload for the Score ScoreList endpoint
// from CLI flags.
func BuildScoreListPayload(scoreScoreListMessage string) (*score.ScoreListPayload, error) {
	var err error
	var message scorepb.ScoreListRequest
	{
		if scoreScoreListMessage != "" {
			err = json.Unmarshal([]byte(scoreScoreListMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"class\": \"Nisi aliquam est consequatur quod ea vitae.\",\n      \"cursor\": 0,\n      \"limit\": 20,\n      \"name\": \"Est vel.\",\n      \"scores\": 8275923798665478266,\n      \"sortField\": \"score\",\n      \"sortOrder\": \"asc\",\n      \"subject\": \"Sed aut labore eum placeat quo corporis.\"\n   }'")
			}
		}
	}
	v := &score.ScoreListPayload{
		Cursor: int(message.Cursor),
		Limit:  int(message.Limit),
	}
	if message.SortField != "" {
		v.SortField = &message.SortField
	}
	if message.SortOrder != "" {
		v.SortOrder = &message.SortOrder
	}
	if message.Name != "" {
		v.Name = &message.Name
	}
	if message.Class != "" {
		v.Class = &message.Class
	}
	if message.Scores != 0 {
		scoresptr := int(message.Scores)
		v.Scores = &scoresptr
	}
	if message.Subject != "" {
		v.Subject = &message.Subject
	}

	return v, nil
}

// BuildScoreDetailPayload builds the payload for the Score ScoreDetail
// endpoint from CLI flags.
func BuildScoreDetailPayload(scoreScoreDetailMessage string) (*score.ScoreDetailPayload, error) {
	var err error
	var message scorepb.ScoreDetailRequest
	{
		if scoreScoreDetailMessage != "" {
			err = json.Unmarshal([]byte(scoreScoreDetailMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": 1\n   }'")
			}
		}
	}
	v := &score.ScoreDetailPayload{
		ID: int(message.Id),
	}

	return v, nil
}
