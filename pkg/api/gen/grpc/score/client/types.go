// Code generated by goa v3.4.2, DO NOT EDIT.
//
// Score gRPC client types
//
// Command:
// $ goa gen sunflower/pkg/api/design -o pkg/api/

package client

import (
	scorepb "sunflower/pkg/api/gen/grpc/score/pb"
	score "sunflower/pkg/api/gen/score"

	goa "goa.design/goa/v3/pkg"
)

// NewScoreListRequest builds the gRPC request type from the payload of the
// "ScoreList" endpoint of the "Score" service.
func NewScoreListRequest(payload *score.ScoreListPayload) *scorepb.ScoreListRequest {
	message := &scorepb.ScoreListRequest{
		Cursor: int32(payload.Cursor),
		Limit:  int32(payload.Limit),
	}
	if payload.SortField != nil {
		message.SortField = *payload.SortField
	}
	if payload.SortOrder != nil {
		message.SortOrder = *payload.SortOrder
	}
	if payload.Name != nil {
		message.Name = *payload.Name
	}
	if payload.Class != nil {
		message.Class = *payload.Class
	}
	if payload.Scores != nil {
		message.Scores = int32(*payload.Scores)
	}
	if payload.Subject != nil {
		message.Subject = *payload.Subject
	}
	return message
}

// NewScoreListResult builds the result type of the "ScoreList" endpoint of the
// "Score" service from the gRPC response type.
func NewScoreListResult(message *scorepb.ScoreListResponse) *score.ScoreListResult {
	result := &score.ScoreListResult{
		Errcode: int(message.Errcode),
		Errmsg:  message.Errmsg,
	}
	if message.NextCursor != 0 {
		nextCursorptr := int(message.NextCursor)
		result.NextCursor = &nextCursorptr
	}
	if message.Total != 0 {
		totalptr := int(message.Total)
		result.Total = &totalptr
	}
	if message.Data != nil {
		result.Data = make([]*score.GradeResult, len(message.Data))
		for i, val := range message.Data {
			result.Data[i] = &score.GradeResult{
				ID:        val.Id,
				Class:     val.Class,
				Name:      val.Name,
				Score:     int(val.Score),
				Subject:   val.Subject,
				CreatedAt: val.CreatedAt,
				UpdatedAt: val.UpdatedAt,
			}
		}
	}
	return result
}

// NewScoreDetailRequest builds the gRPC request type from the payload of the
// "ScoreDetail" endpoint of the "Score" service.
func NewScoreDetailRequest(payload *score.ScoreDetailPayload) *scorepb.ScoreDetailRequest {
	message := &scorepb.ScoreDetailRequest{
		Id: int32(payload.ID),
	}
	return message
}

// NewScoreDetailResult builds the result type of the "ScoreDetail" endpoint of
// the "Score" service from the gRPC response type.
func NewScoreDetailResult(message *scorepb.ScoreDetailResponse) *score.ScoreDetailResult {
	result := &score.ScoreDetailResult{
		Errcode: int(message.Errcode),
		Errmsg:  message.Errmsg,
	}
	if message.Data != nil {
		result.Data = protobufScorepbGradeResultToScoreGradeResult(message.Data)
	}
	return result
}

// ValidateScoreListResponse runs the validations defined on ScoreListResponse.
func ValidateScoreListResponse(message *scorepb.ScoreListResponse) (err error) {
	if message.Errcode < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.errcode", message.Errcode, 0, true))
	}
	if message.Errcode > 999999 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.errcode", message.Errcode, 999999, false))
	}
	return
}

// ValidateGradeResult runs the validations defined on GradeResult.
func ValidateGradeResult(message *scorepb.GradeResult) (err error) {

	return
}

// ValidateScoreDetailResponse runs the validations defined on
// ScoreDetailResponse.
func ValidateScoreDetailResponse(message *scorepb.ScoreDetailResponse) (err error) {
	if message.Errcode < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.errcode", message.Errcode, 0, true))
	}
	if message.Errcode > 999999 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.errcode", message.Errcode, 999999, false))
	}
	return
}

// svcScoreGradeResultToScorepbGradeResult builds a value of type
// *scorepb.GradeResult from a value of type *score.GradeResult.
func svcScoreGradeResultToScorepbGradeResult(v *score.GradeResult) *scorepb.GradeResult {
	if v == nil {
		return nil
	}
	res := &scorepb.GradeResult{
		Id:        v.ID,
		Class:     v.Class,
		Name:      v.Name,
		Score:     int32(v.Score),
		Subject:   v.Subject,
		CreatedAt: v.CreatedAt,
		UpdatedAt: v.UpdatedAt,
	}

	return res
}

// protobufScorepbGradeResultToScoreGradeResult builds a value of type
// *score.GradeResult from a value of type *scorepb.GradeResult.
func protobufScorepbGradeResultToScoreGradeResult(v *scorepb.GradeResult) *score.GradeResult {
	if v == nil {
		return nil
	}
	res := &score.GradeResult{
		ID:        v.Id,
		Class:     v.Class,
		Name:      v.Name,
		Score:     int(v.Score),
		Subject:   v.Subject,
		CreatedAt: v.CreatedAt,
		UpdatedAt: v.UpdatedAt,
	}

	return res
}
