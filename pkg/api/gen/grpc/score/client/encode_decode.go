// Code generated by goa v3.4.2, DO NOT EDIT.
//
// Score gRPC client encoders and decoders
//
// Command:
// $ goa gen sunflower/pkg/api/design -o pkg/api/

package client

import (
	"context"
	scorepb "sunflower/pkg/api/gen/grpc/score/pb"
	score "sunflower/pkg/api/gen/score"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildScoreListFunc builds the remote method to invoke for "Score" service
// "ScoreList" endpoint.
func BuildScoreListFunc(grpccli scorepb.ScoreClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.ScoreList(ctx, reqpb.(*scorepb.ScoreListRequest), opts...)
		}
		return grpccli.ScoreList(ctx, &scorepb.ScoreListRequest{}, opts...)
	}
}

// EncodeScoreListRequest encodes requests sent to Score ScoreList endpoint.
func EncodeScoreListRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*score.ScoreListPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Score", "ScoreList", "*score.ScoreListPayload", v)
	}
	return NewScoreListRequest(payload), nil
}

// DecodeScoreListResponse decodes responses from the Score ScoreList endpoint.
func DecodeScoreListResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*scorepb.ScoreListResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Score", "ScoreList", "*scorepb.ScoreListResponse", v)
	}
	if err := ValidateScoreListResponse(message); err != nil {
		return nil, err
	}
	res := NewScoreListResult(message)
	return res, nil
}

// BuildScoreDetailFunc builds the remote method to invoke for "Score" service
// "ScoreDetail" endpoint.
func BuildScoreDetailFunc(grpccli scorepb.ScoreClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.ScoreDetail(ctx, reqpb.(*scorepb.ScoreDetailRequest), opts...)
		}
		return grpccli.ScoreDetail(ctx, &scorepb.ScoreDetailRequest{}, opts...)
	}
}

// EncodeScoreDetailRequest encodes requests sent to Score ScoreDetail endpoint.
func EncodeScoreDetailRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*score.ScoreDetailPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Score", "ScoreDetail", "*score.ScoreDetailPayload", v)
	}
	return NewScoreDetailRequest(payload), nil
}

// DecodeScoreDetailResponse decodes responses from the Score ScoreDetail
// endpoint.
func DecodeScoreDetailResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*scorepb.ScoreDetailResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Score", "ScoreDetail", "*scorepb.ScoreDetailResponse", v)
	}
	if err := ValidateScoreDetailResponse(message); err != nil {
		return nil, err
	}
	res := NewScoreDetailResult(message)
	return res, nil
}
