// Code generated by goa v3.4.2, DO NOT EDIT.
//
// Score HTTP client encoders and decoders
//
// Command:
// $ goa gen sunflower/pkg/api/design -o pkg/api/

package client

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"os"
	score "sunflower/pkg/api/gen/score"

	goahttp "goa.design/goa/v3/http"
)

// BuildUploadRequest instantiates a HTTP request object with method and path
// set to call the "Score" service "Upload" endpoint
func (c *Client) BuildUploadRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		body io.Reader
	)
	rd, ok := v.(*score.UploadRequestData)
	if !ok {
		return nil, goahttp.ErrInvalidType("Score", "Upload", "score.UploadRequestData", v)
	}
	body = rd.Body
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UploadScorePath()}
	req, err := http.NewRequest("POST", u.String(), body)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Score", "Upload", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUploadRequest returns an encoder for requests sent to the Score Upload
// server.
func EncodeUploadRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		data, ok := v.(*score.UploadRequestData)
		if !ok {
			return goahttp.ErrInvalidType("Score", "Upload", "*score.UploadRequestData", v)
		}
		p := data.Payload
		{
			head := p.ContentType
			req.Header.Set("Content-Type", head)
		}
		return nil
	}
}

// DecodeUploadResponse returns a decoder for responses returned by the Score
// Upload endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeUploadResponse may return the following errors:
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "internal_server_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeUploadResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UploadResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Score", "Upload", err)
			}
			err = ValidateUploadResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Score", "Upload", err)
			}
			res := NewUploadResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UploadBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Score", "Upload", err)
			}
			err = ValidateUploadBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Score", "Upload", err)
			}
			return nil, NewUploadBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body UploadInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Score", "Upload", err)
			}
			err = ValidateUploadInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Score", "Upload", err)
			}
			return nil, NewUploadInternalServerError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Score", "Upload", resp.StatusCode, string(body))
		}
	}
}

// // BuildUploadStreamPayload creates a streaming endpoint request payload from
// the method payload and the path to the file to be streamed
func BuildUploadStreamPayload(payload interface{}, fpath string) (*score.UploadRequestData, error) {
	f, err := os.Open(fpath)
	if err != nil {
		return nil, err
	}
	return &score.UploadRequestData{
		Payload: payload.(*score.UploadPayload),
		Body:    f,
	}, nil
}

// BuildScoreListRequest instantiates a HTTP request object with method and
// path set to call the "Score" service "ScoreList" endpoint
func (c *Client) BuildScoreListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ScoreListScorePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Score", "ScoreList", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeScoreListRequest returns an encoder for requests sent to the Score
// ScoreList server.
func EncodeScoreListRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*score.ScoreListPayload)
		if !ok {
			return goahttp.ErrInvalidType("Score", "ScoreList", "*score.ScoreListPayload", v)
		}
		values := req.URL.Query()
		if p.SortField != nil {
			values.Add("sortField", *p.SortField)
		}
		values.Add("cursor", fmt.Sprintf("%v", p.Cursor))
		values.Add("limit", fmt.Sprintf("%v", p.Limit))
		if p.SortOrder != nil {
			values.Add("sortOrder", *p.SortOrder)
		}
		if p.Name != nil {
			values.Add("name", *p.Name)
		}
		if p.Class != nil {
			values.Add("class", *p.Class)
		}
		if p.Scores != nil {
			values.Add("scores", fmt.Sprintf("%v", *p.Scores))
		}
		if p.Subject != nil {
			values.Add("subject", *p.Subject)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeScoreListResponse returns a decoder for responses returned by the
// Score ScoreList endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeScoreListResponse may return the following errors:
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "internal_server_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeScoreListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ScoreListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Score", "ScoreList", err)
			}
			err = ValidateScoreListResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Score", "ScoreList", err)
			}
			res := NewScoreListResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body ScoreListBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Score", "ScoreList", err)
			}
			err = ValidateScoreListBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Score", "ScoreList", err)
			}
			return nil, NewScoreListBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body ScoreListInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Score", "ScoreList", err)
			}
			err = ValidateScoreListInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Score", "ScoreList", err)
			}
			return nil, NewScoreListInternalServerError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Score", "ScoreList", resp.StatusCode, string(body))
		}
	}
}

// BuildScoreDetailRequest instantiates a HTTP request object with method and
// path set to call the "Score" service "ScoreDetail" endpoint
func (c *Client) BuildScoreDetailRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*score.ScoreDetailPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Score", "ScoreDetail", "*score.ScoreDetailPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ScoreDetailScorePath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Score", "ScoreDetail", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeScoreDetailResponse returns a decoder for responses returned by the
// Score ScoreDetail endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeScoreDetailResponse may return the following errors:
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "internal_server_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeScoreDetailResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ScoreDetailResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Score", "ScoreDetail", err)
			}
			err = ValidateScoreDetailResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Score", "ScoreDetail", err)
			}
			res := NewScoreDetailResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body ScoreDetailBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Score", "ScoreDetail", err)
			}
			err = ValidateScoreDetailBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Score", "ScoreDetail", err)
			}
			return nil, NewScoreDetailBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body ScoreDetailInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Score", "ScoreDetail", err)
			}
			err = ValidateScoreDetailInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Score", "ScoreDetail", err)
			}
			return nil, NewScoreDetailInternalServerError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Score", "ScoreDetail", resp.StatusCode, string(body))
		}
	}
}

// unmarshalSuccessResultResponseBodyToScoreSuccessResult builds a value of
// type *score.SuccessResult from a value of type *SuccessResultResponseBody.
func unmarshalSuccessResultResponseBodyToScoreSuccessResult(v *SuccessResultResponseBody) *score.SuccessResult {
	if v == nil {
		return nil
	}
	res := &score.SuccessResult{
		OK: *v.OK,
	}

	return res
}

// unmarshalGradeResultResponseBodyToScoreGradeResult builds a value of type
// *score.GradeResult from a value of type *GradeResultResponseBody.
func unmarshalGradeResultResponseBodyToScoreGradeResult(v *GradeResultResponseBody) *score.GradeResult {
	if v == nil {
		return nil
	}
	res := &score.GradeResult{
		ID:        *v.ID,
		Class:     *v.Class,
		Name:      *v.Name,
		Score:     *v.Score,
		Subject:   *v.Subject,
		CreatedAt: *v.CreatedAt,
		UpdatedAt: *v.UpdatedAt,
	}

	return res
}
