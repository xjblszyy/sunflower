// Code generated by goa v3.4.2, DO NOT EDIT.
//
// Score HTTP client types
//
// Command:
// $ goa gen sunflower/pkg/api/design -o pkg/api/

package client

import (
	score "sunflower/pkg/api/gen/score"

	goa "goa.design/goa/v3/pkg"
)

// UploadResponseBody is the type of the "Score" service "Upload" endpoint HTTP
// response body.
type UploadResponseBody struct {
	// 错误码
	Errcode *int `form:"errcode,omitempty" json:"errcode,omitempty" xml:"errcode,omitempty"`
	// 错误消息
	Errmsg *string                    `form:"errmsg,omitempty" json:"errmsg,omitempty" xml:"errmsg,omitempty"`
	Data   *SuccessResultResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// ScoreListResponseBody is the type of the "Score" service "ScoreList"
// endpoint HTTP response body.
type ScoreListResponseBody struct {
	// 错误码
	Errcode *int `form:"errcode,omitempty" json:"errcode,omitempty" xml:"errcode,omitempty"`
	// 错误消息
	Errmsg *string `form:"errmsg,omitempty" json:"errmsg,omitempty" xml:"errmsg,omitempty"`
	// 结果
	Data []*GradeResultResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// 下一页游标
	NextCursor *int `form:"nextCursor,omitempty" json:"nextCursor,omitempty" xml:"nextCursor,omitempty"`
	// 总记录数
	Total *int `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
}

// ScoreDetailResponseBody is the type of the "Score" service "ScoreDetail"
// endpoint HTTP response body.
type ScoreDetailResponseBody struct {
	// 错误码
	Errcode *int `form:"errcode,omitempty" json:"errcode,omitempty" xml:"errcode,omitempty"`
	// 错误消息
	Errmsg *string `form:"errmsg,omitempty" json:"errmsg,omitempty" xml:"errmsg,omitempty"`
	// 结果
	Data *GradeResultResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// UploadBadRequestResponseBody is the type of the "Score" service "Upload"
// endpoint HTTP response body for the "bad_request" error.
type UploadBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UploadInternalServerErrorResponseBody is the type of the "Score" service
// "Upload" endpoint HTTP response body for the "internal_server_error" error.
type UploadInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ScoreListBadRequestResponseBody is the type of the "Score" service
// "ScoreList" endpoint HTTP response body for the "bad_request" error.
type ScoreListBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ScoreListInternalServerErrorResponseBody is the type of the "Score" service
// "ScoreList" endpoint HTTP response body for the "internal_server_error"
// error.
type ScoreListInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ScoreDetailBadRequestResponseBody is the type of the "Score" service
// "ScoreDetail" endpoint HTTP response body for the "bad_request" error.
type ScoreDetailBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ScoreDetailInternalServerErrorResponseBody is the type of the "Score"
// service "ScoreDetail" endpoint HTTP response body for the
// "internal_server_error" error.
type ScoreDetailInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// SuccessResultResponseBody is used to define fields on response body types.
type SuccessResultResponseBody struct {
	// success
	OK *bool `form:"ok,omitempty" json:"ok,omitempty" xml:"ok,omitempty"`
}

// GradeResultResponseBody is used to define fields on response body types.
type GradeResultResponseBody struct {
	// ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// 班级
	Class *string `form:"class,omitempty" json:"class,omitempty" xml:"class,omitempty"`
	// 姓名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// 得分
	Score *int `form:"score,omitempty" json:"score,omitempty" xml:"score,omitempty"`
	// 科目
	Subject *string `form:"subject,omitempty" json:"subject,omitempty" xml:"subject,omitempty"`
	// 创建时间
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt *string `form:"updatedAt,omitempty" json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
}

// NewUploadResultOK builds a "Score" service "Upload" endpoint result from a
// HTTP "OK" response.
func NewUploadResultOK(body *UploadResponseBody) *score.UploadResult {
	v := &score.UploadResult{
		Errcode: *body.Errcode,
		Errmsg:  *body.Errmsg,
	}
	if body.Data != nil {
		v.Data = unmarshalSuccessResultResponseBodyToScoreSuccessResult(body.Data)
	}

	return v
}

// NewUploadBadRequest builds a Score service Upload endpoint bad_request error.
func NewUploadBadRequest(body *UploadBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUploadInternalServerError builds a Score service Upload endpoint
// internal_server_error error.
func NewUploadInternalServerError(body *UploadInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewScoreListResultOK builds a "Score" service "ScoreList" endpoint result
// from a HTTP "OK" response.
func NewScoreListResultOK(body *ScoreListResponseBody) *score.ScoreListResult {
	v := &score.ScoreListResult{
		Errcode:    *body.Errcode,
		Errmsg:     *body.Errmsg,
		NextCursor: body.NextCursor,
		Total:      body.Total,
	}
	if body.Data != nil {
		v.Data = make([]*score.GradeResult, len(body.Data))
		for i, val := range body.Data {
			v.Data[i] = unmarshalGradeResultResponseBodyToScoreGradeResult(val)
		}
	}

	return v
}

// NewScoreListBadRequest builds a Score service ScoreList endpoint bad_request
// error.
func NewScoreListBadRequest(body *ScoreListBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewScoreListInternalServerError builds a Score service ScoreList endpoint
// internal_server_error error.
func NewScoreListInternalServerError(body *ScoreListInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewScoreDetailResultOK builds a "Score" service "ScoreDetail" endpoint
// result from a HTTP "OK" response.
func NewScoreDetailResultOK(body *ScoreDetailResponseBody) *score.ScoreDetailResult {
	v := &score.ScoreDetailResult{
		Errcode: *body.Errcode,
		Errmsg:  *body.Errmsg,
	}
	if body.Data != nil {
		v.Data = unmarshalGradeResultResponseBodyToScoreGradeResult(body.Data)
	}

	return v
}

// NewScoreDetailBadRequest builds a Score service ScoreDetail endpoint
// bad_request error.
func NewScoreDetailBadRequest(body *ScoreDetailBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewScoreDetailInternalServerError builds a Score service ScoreDetail
// endpoint internal_server_error error.
func NewScoreDetailInternalServerError(body *ScoreDetailInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateUploadResponseBody runs the validations defined on UploadResponseBody
func ValidateUploadResponseBody(body *UploadResponseBody) (err error) {
	if body.Errcode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("errcode", "body"))
	}
	if body.Errmsg == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("errmsg", "body"))
	}
	if body.Errcode != nil {
		if *body.Errcode < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.errcode", *body.Errcode, 0, true))
		}
	}
	if body.Errcode != nil {
		if *body.Errcode > 999999 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.errcode", *body.Errcode, 999999, false))
		}
	}
	if body.Data != nil {
		if err2 := ValidateSuccessResultResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateScoreListResponseBody runs the validations defined on
// ScoreListResponseBody
func ValidateScoreListResponseBody(body *ScoreListResponseBody) (err error) {
	if body.Errcode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("errcode", "body"))
	}
	if body.Errmsg == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("errmsg", "body"))
	}
	if body.Errcode != nil {
		if *body.Errcode < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.errcode", *body.Errcode, 0, true))
		}
	}
	if body.Errcode != nil {
		if *body.Errcode > 999999 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.errcode", *body.Errcode, 999999, false))
		}
	}
	for _, e := range body.Data {
		if e != nil {
			if err2 := ValidateGradeResultResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateScoreDetailResponseBody runs the validations defined on
// ScoreDetailResponseBody
func ValidateScoreDetailResponseBody(body *ScoreDetailResponseBody) (err error) {
	if body.Errcode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("errcode", "body"))
	}
	if body.Errmsg == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("errmsg", "body"))
	}
	if body.Errcode != nil {
		if *body.Errcode < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.errcode", *body.Errcode, 0, true))
		}
	}
	if body.Errcode != nil {
		if *body.Errcode > 999999 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.errcode", *body.Errcode, 999999, false))
		}
	}
	if body.Data != nil {
		if err2 := ValidateGradeResultResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUploadBadRequestResponseBody runs the validations defined on
// Upload_bad_request_Response_Body
func ValidateUploadBadRequestResponseBody(body *UploadBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUploadInternalServerErrorResponseBody runs the validations defined
// on Upload_internal_server_error_Response_Body
func ValidateUploadInternalServerErrorResponseBody(body *UploadInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateScoreListBadRequestResponseBody runs the validations defined on
// ScoreList_bad_request_Response_Body
func ValidateScoreListBadRequestResponseBody(body *ScoreListBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateScoreListInternalServerErrorResponseBody runs the validations
// defined on ScoreList_internal_server_error_Response_Body
func ValidateScoreListInternalServerErrorResponseBody(body *ScoreListInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateScoreDetailBadRequestResponseBody runs the validations defined on
// ScoreDetail_bad_request_Response_Body
func ValidateScoreDetailBadRequestResponseBody(body *ScoreDetailBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateScoreDetailInternalServerErrorResponseBody runs the validations
// defined on ScoreDetail_internal_server_error_Response_Body
func ValidateScoreDetailInternalServerErrorResponseBody(body *ScoreDetailInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateSuccessResultResponseBody runs the validations defined on
// SuccessResultResponseBody
func ValidateSuccessResultResponseBody(body *SuccessResultResponseBody) (err error) {
	if body.OK == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ok", "body"))
	}
	return
}

// ValidateGradeResultResponseBody runs the validations defined on
// GradeResultResponseBody
func ValidateGradeResultResponseBody(body *GradeResultResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Class == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("class", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Score == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("score", "body"))
	}
	if body.Subject == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("subject", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("createdAt", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updatedAt", "body"))
	}
	return
}
