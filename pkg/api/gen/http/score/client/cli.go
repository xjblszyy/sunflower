// Code generated by goa v3.4.2, DO NOT EDIT.
//
// Score HTTP client CLI support package
//
// Command:
// $ goa gen sunflower/pkg/api/design -o pkg/api/

package client

import (
	"fmt"
	"strconv"
	score "sunflower/pkg/api/gen/score"

	goa "goa.design/goa/v3/pkg"
)

// BuildUploadPayload builds the payload for the Score Upload endpoint from CLI
// flags.
func BuildUploadPayload(scoreUploadContentType string) (*score.UploadPayload, error) {
	var err error
	var contentType string
	{
		if scoreUploadContentType != "" {
			contentType = scoreUploadContentType
			err = goa.MergeErrors(err, goa.ValidatePattern("contentType", contentType, "multipart/[^;]+; boundary=.+"))
			if err != nil {
				return nil, err
			}
		}
	}
	v := &score.UploadPayload{}
	v.ContentType = contentType

	return v, nil
}

// BuildScoreListPayload builds the payload for the Score ScoreList endpoint
// from CLI flags.
func BuildScoreListPayload(scoreScoreListSortField string, scoreScoreListCursor string, scoreScoreListLimit string, scoreScoreListSortOrder string, scoreScoreListName string, scoreScoreListClass string, scoreScoreListScores string, scoreScoreListSubject string) (*score.ScoreListPayload, error) {
	var err error
	var sortField *string
	{
		if scoreScoreListSortField != "" {
			sortField = &scoreScoreListSortField
			if sortField != nil {
				if !(*sortField == "class" || *sortField == "name" || *sortField == "score" || *sortField == "subject" || *sortField == "createdAt") {
					err = goa.MergeErrors(err, goa.InvalidEnumValueError("sortField", *sortField, []interface{}{"class", "name", "score", "subject", "createdAt"}))
				}
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var cursor int
	{
		var v int64
		v, err = strconv.ParseInt(scoreScoreListCursor, 10, 64)
		cursor = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for cursor, must be INT")
		}
	}
	var limit int
	{
		var v int64
		v, err = strconv.ParseInt(scoreScoreListLimit, 10, 64)
		limit = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for limit, must be INT")
		}
		if limit > 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 100, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var sortOrder *string
	{
		if scoreScoreListSortOrder != "" {
			sortOrder = &scoreScoreListSortOrder
			if sortOrder != nil {
				if !(*sortOrder == "asc" || *sortOrder == "desc") {
					err = goa.MergeErrors(err, goa.InvalidEnumValueError("sortOrder", *sortOrder, []interface{}{"asc", "desc"}))
				}
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var name *string
	{
		if scoreScoreListName != "" {
			name = &scoreScoreListName
		}
	}
	var class *string
	{
		if scoreScoreListClass != "" {
			class = &scoreScoreListClass
		}
	}
	var scores *int
	{
		if scoreScoreListScores != "" {
			var v int64
			v, err = strconv.ParseInt(scoreScoreListScores, 10, 64)
			val := int(v)
			scores = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for scores, must be INT")
			}
		}
	}
	var subject *string
	{
		if scoreScoreListSubject != "" {
			subject = &scoreScoreListSubject
		}
	}
	v := &score.ScoreListPayload{}
	v.SortField = sortField
	v.Cursor = cursor
	v.Limit = limit
	v.SortOrder = sortOrder
	v.Name = name
	v.Class = class
	v.Scores = scores
	v.Subject = subject

	return v, nil
}

// BuildScoreDetailPayload builds the payload for the Score ScoreDetail
// endpoint from CLI flags.
func BuildScoreDetailPayload(scoreScoreDetailID string) (*score.ScoreDetailPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(scoreScoreDetailID, 10, 64)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &score.ScoreDetailPayload{}
	v.ID = id

	return v, nil
}
