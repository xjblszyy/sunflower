// Code generated by goa v3.4.2, DO NOT EDIT.
//
// Score HTTP server types
//
// Command:
// $ goa gen sunflower/pkg/api/design -o pkg/api/

package server

import (
	score "sunflower/pkg/api/gen/score"

	goa "goa.design/goa/v3/pkg"
)

// UploadResponseBody is the type of the "Score" service "Upload" endpoint HTTP
// response body.
type UploadResponseBody struct {
	// 错误码
	Errcode int `form:"errcode" json:"errcode" xml:"errcode"`
	// 错误消息
	Errmsg string                     `form:"errmsg" json:"errmsg" xml:"errmsg"`
	Data   *SuccessResultResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// ScoreListResponseBody is the type of the "Score" service "ScoreList"
// endpoint HTTP response body.
type ScoreListResponseBody struct {
	// 错误码
	Errcode int `form:"errcode" json:"errcode" xml:"errcode"`
	// 错误消息
	Errmsg string `form:"errmsg" json:"errmsg" xml:"errmsg"`
	// 结果
	Data []*GradeResultResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// 下一页游标
	NextCursor *int `form:"nextCursor,omitempty" json:"nextCursor,omitempty" xml:"nextCursor,omitempty"`
	// 总记录数
	Total *int `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
}

// ScoreDetailResponseBody is the type of the "Score" service "ScoreDetail"
// endpoint HTTP response body.
type ScoreDetailResponseBody struct {
	// 错误码
	Errcode int `form:"errcode" json:"errcode" xml:"errcode"`
	// 错误消息
	Errmsg string `form:"errmsg" json:"errmsg" xml:"errmsg"`
	// 结果
	Data *GradeResultResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// UploadBadRequestResponseBody is the type of the "Score" service "Upload"
// endpoint HTTP response body for the "bad_request" error.
type UploadBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadInternalServerErrorResponseBody is the type of the "Score" service
// "Upload" endpoint HTTP response body for the "internal_server_error" error.
type UploadInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ScoreListBadRequestResponseBody is the type of the "Score" service
// "ScoreList" endpoint HTTP response body for the "bad_request" error.
type ScoreListBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ScoreListInternalServerErrorResponseBody is the type of the "Score" service
// "ScoreList" endpoint HTTP response body for the "internal_server_error"
// error.
type ScoreListInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ScoreDetailBadRequestResponseBody is the type of the "Score" service
// "ScoreDetail" endpoint HTTP response body for the "bad_request" error.
type ScoreDetailBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ScoreDetailInternalServerErrorResponseBody is the type of the "Score"
// service "ScoreDetail" endpoint HTTP response body for the
// "internal_server_error" error.
type ScoreDetailInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SuccessResultResponseBody is used to define fields on response body types.
type SuccessResultResponseBody struct {
	// success
	OK bool `form:"ok" json:"ok" xml:"ok"`
}

// GradeResultResponseBody is used to define fields on response body types.
type GradeResultResponseBody struct {
	// ID
	ID string `form:"id" json:"id" xml:"id"`
	// 班级
	Class string `form:"class" json:"class" xml:"class"`
	// 姓名
	Name string `form:"name" json:"name" xml:"name"`
	// 得分
	Score int `form:"score" json:"score" xml:"score"`
	// 科目
	Subject string `form:"subject" json:"subject" xml:"subject"`
	// 创建时间
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// 更新时间
	UpdatedAt string `form:"updatedAt" json:"updatedAt" xml:"updatedAt"`
}

// NewUploadResponseBody builds the HTTP response body from the result of the
// "Upload" endpoint of the "Score" service.
func NewUploadResponseBody(res *score.UploadResult) *UploadResponseBody {
	body := &UploadResponseBody{
		Errcode: res.Errcode,
		Errmsg:  res.Errmsg,
	}
	if res.Data != nil {
		body.Data = marshalScoreSuccessResultToSuccessResultResponseBody(res.Data)
	}
	return body
}

// NewScoreListResponseBody builds the HTTP response body from the result of
// the "ScoreList" endpoint of the "Score" service.
func NewScoreListResponseBody(res *score.ScoreListResult) *ScoreListResponseBody {
	body := &ScoreListResponseBody{
		Errcode:    res.Errcode,
		Errmsg:     res.Errmsg,
		NextCursor: res.NextCursor,
		Total:      res.Total,
	}
	if res.Data != nil {
		body.Data = make([]*GradeResultResponseBody, len(res.Data))
		for i, val := range res.Data {
			body.Data[i] = marshalScoreGradeResultToGradeResultResponseBody(val)
		}
	}
	return body
}

// NewScoreDetailResponseBody builds the HTTP response body from the result of
// the "ScoreDetail" endpoint of the "Score" service.
func NewScoreDetailResponseBody(res *score.ScoreDetailResult) *ScoreDetailResponseBody {
	body := &ScoreDetailResponseBody{
		Errcode: res.Errcode,
		Errmsg:  res.Errmsg,
	}
	if res.Data != nil {
		body.Data = marshalScoreGradeResultToGradeResultResponseBody(res.Data)
	}
	return body
}

// NewUploadBadRequestResponseBody builds the HTTP response body from the
// result of the "Upload" endpoint of the "Score" service.
func NewUploadBadRequestResponseBody(res *goa.ServiceError) *UploadBadRequestResponseBody {
	body := &UploadBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadInternalServerErrorResponseBody builds the HTTP response body from
// the result of the "Upload" endpoint of the "Score" service.
func NewUploadInternalServerErrorResponseBody(res *goa.ServiceError) *UploadInternalServerErrorResponseBody {
	body := &UploadInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewScoreListBadRequestResponseBody builds the HTTP response body from the
// result of the "ScoreList" endpoint of the "Score" service.
func NewScoreListBadRequestResponseBody(res *goa.ServiceError) *ScoreListBadRequestResponseBody {
	body := &ScoreListBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewScoreListInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "ScoreList" endpoint of the "Score" service.
func NewScoreListInternalServerErrorResponseBody(res *goa.ServiceError) *ScoreListInternalServerErrorResponseBody {
	body := &ScoreListInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewScoreDetailBadRequestResponseBody builds the HTTP response body from the
// result of the "ScoreDetail" endpoint of the "Score" service.
func NewScoreDetailBadRequestResponseBody(res *goa.ServiceError) *ScoreDetailBadRequestResponseBody {
	body := &ScoreDetailBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewScoreDetailInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "ScoreDetail" endpoint of the "Score" service.
func NewScoreDetailInternalServerErrorResponseBody(res *goa.ServiceError) *ScoreDetailInternalServerErrorResponseBody {
	body := &ScoreDetailInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadPayload builds a Score service Upload endpoint payload.
func NewUploadPayload(contentType string) *score.UploadPayload {
	v := &score.UploadPayload{}
	v.ContentType = contentType

	return v
}

// NewScoreListPayload builds a Score service ScoreList endpoint payload.
func NewScoreListPayload(sortField *string, cursor int, limit int, sortOrder *string, name *string, class *string, scores *int, subject *string) *score.ScoreListPayload {
	v := &score.ScoreListPayload{}
	v.SortField = sortField
	v.Cursor = cursor
	v.Limit = limit
	v.SortOrder = sortOrder
	v.Name = name
	v.Class = class
	v.Scores = scores
	v.Subject = subject

	return v
}

// NewScoreDetailPayload builds a Score service ScoreDetail endpoint payload.
func NewScoreDetailPayload(id int) *score.ScoreDetailPayload {
	v := &score.ScoreDetailPayload{}
	v.ID = id

	return v
}
