// Code generated by goa v3.4.2, DO NOT EDIT.
//
// Score HTTP server encoders and decoders
//
// Command:
// $ goa gen sunflower/pkg/api/design -o pkg/api/

package server

import (
	"context"
	"net/http"
	"strconv"
	score "sunflower/pkg/api/gen/score"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeUploadResponse returns an encoder for responses returned by the Score
// Upload endpoint.
func EncodeUploadResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*score.UploadResult)
		enc := encoder(ctx, w)
		body := NewUploadResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUploadRequest returns a decoder for requests sent to the Score Upload
// endpoint.
func DecodeUploadRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			contentType string
			err         error
		)
		contentTypeRaw := r.Header.Get("Content-Type")
		if contentTypeRaw != "" {
			contentType = contentTypeRaw
		} else {
			contentType = "multipart/form-data; boundary=goa"
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("contentType", contentType, "multipart/[^;]+; boundary=.+"))
		if err != nil {
			return nil, err
		}
		payload := NewUploadPayload(contentType)

		return payload, nil
	}
}

// EncodeUploadError returns an encoder for errors returned by the Upload Score
// endpoint.
func EncodeUploadError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "bad_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewUploadBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "internal_server_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewUploadInternalServerErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeScoreListResponse returns an encoder for responses returned by the
// Score ScoreList endpoint.
func EncodeScoreListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*score.ScoreListResult)
		enc := encoder(ctx, w)
		body := NewScoreListResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeScoreListRequest returns a decoder for requests sent to the Score
// ScoreList endpoint.
func DecodeScoreListRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			sortField *string
			cursor    int
			limit     int
			sortOrder *string
			name      *string
			class     *string
			scores    *int
			subject   *string
			err       error
		)
		sortFieldRaw := r.URL.Query().Get("sortField")
		if sortFieldRaw != "" {
			sortField = &sortFieldRaw
		}
		if sortField != nil {
			if !(*sortField == "class" || *sortField == "name" || *sortField == "score" || *sortField == "subject" || *sortField == "createdAt") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("sortField", *sortField, []interface{}{"class", "name", "score", "subject", "createdAt"}))
			}
		}
		{
			cursorRaw := r.URL.Query().Get("cursor")
			if cursorRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("cursor", "query string"))
			}
			v, err2 := strconv.ParseInt(cursorRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("cursor", cursorRaw, "integer"))
			}
			cursor = int(v)
		}
		{
			limitRaw := r.URL.Query().Get("limit")
			if limitRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("limit", "query string"))
			}
			v, err2 := strconv.ParseInt(limitRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("limit", limitRaw, "integer"))
			}
			limit = int(v)
		}
		if limit > 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 100, false))
		}
		sortOrderRaw := r.URL.Query().Get("sortOrder")
		if sortOrderRaw != "" {
			sortOrder = &sortOrderRaw
		}
		if sortOrder != nil {
			if !(*sortOrder == "asc" || *sortOrder == "desc") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("sortOrder", *sortOrder, []interface{}{"asc", "desc"}))
			}
		}
		nameRaw := r.URL.Query().Get("name")
		if nameRaw != "" {
			name = &nameRaw
		}
		classRaw := r.URL.Query().Get("class")
		if classRaw != "" {
			class = &classRaw
		}
		{
			scoresRaw := r.URL.Query().Get("scores")
			if scoresRaw != "" {
				v, err2 := strconv.ParseInt(scoresRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("scores", scoresRaw, "integer"))
				}
				pv := int(v)
				scores = &pv
			}
		}
		subjectRaw := r.URL.Query().Get("subject")
		if subjectRaw != "" {
			subject = &subjectRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewScoreListPayload(sortField, cursor, limit, sortOrder, name, class, scores, subject)

		return payload, nil
	}
}

// EncodeScoreListError returns an encoder for errors returned by the ScoreList
// Score endpoint.
func EncodeScoreListError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "bad_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewScoreListBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "internal_server_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewScoreListInternalServerErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeScoreDetailResponse returns an encoder for responses returned by the
// Score ScoreDetail endpoint.
func EncodeScoreDetailResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*score.ScoreDetailResult)
		enc := encoder(ctx, w)
		body := NewScoreDetailResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeScoreDetailRequest returns a decoder for requests sent to the Score
// ScoreDetail endpoint.
func DecodeScoreDetailRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id  int
			err error

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseInt(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "integer"))
			}
			id = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewScoreDetailPayload(id)

		return payload, nil
	}
}

// EncodeScoreDetailError returns an encoder for errors returned by the
// ScoreDetail Score endpoint.
func EncodeScoreDetailError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "bad_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewScoreDetailBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "internal_server_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewScoreDetailInternalServerErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalScoreSuccessResultToSuccessResultResponseBody builds a value of type
// *SuccessResultResponseBody from a value of type *score.SuccessResult.
func marshalScoreSuccessResultToSuccessResultResponseBody(v *score.SuccessResult) *SuccessResultResponseBody {
	if v == nil {
		return nil
	}
	res := &SuccessResultResponseBody{
		OK: v.OK,
	}

	return res
}

// marshalScoreGradeResultToGradeResultResponseBody builds a value of type
// *GradeResultResponseBody from a value of type *score.GradeResult.
func marshalScoreGradeResultToGradeResultResponseBody(v *score.GradeResult) *GradeResultResponseBody {
	if v == nil {
		return nil
	}
	res := &GradeResultResponseBody{
		ID:        v.ID,
		Class:     v.Class,
		Name:      v.Name,
		Score:     v.Score,
		Subject:   v.Subject,
		CreatedAt: v.CreatedAt,
		UpdatedAt: v.UpdatedAt,
	}

	return res
}
