// Code generated by goa v3.4.2, DO NOT EDIT.
//
// sunflower HTTP client CLI support package
//
// Command:
// $ goa gen sunflower/pkg/api/design -o pkg/api/

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"
	scorec "sunflower/pkg/api/gen/http/score/client"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `score (upload|score-list|score-detail)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` score upload --content-type "multipart/form-data; boundary=goa" --stream "goa.png"` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		scoreFlags = flag.NewFlagSet("score", flag.ContinueOnError)

		scoreUploadFlags           = flag.NewFlagSet("upload", flag.ExitOnError)
		scoreUploadContentTypeFlag = scoreUploadFlags.String("content-type", "multipart/form-data; boundary=goa", "")
		scoreUploadStreamFlag      = scoreUploadFlags.String("stream", "REQUIRED", "path to file containing the streamed request body")

		scoreScoreListFlags         = flag.NewFlagSet("score-list", flag.ExitOnError)
		scoreScoreListSortFieldFlag = scoreScoreListFlags.String("sort-field", "", "")
		scoreScoreListCursorFlag    = scoreScoreListFlags.String("cursor", "REQUIRED", "")
		scoreScoreListLimitFlag     = scoreScoreListFlags.String("limit", "REQUIRED", "")
		scoreScoreListSortOrderFlag = scoreScoreListFlags.String("sort-order", "", "")
		scoreScoreListNameFlag      = scoreScoreListFlags.String("name", "", "")
		scoreScoreListClassFlag     = scoreScoreListFlags.String("class", "", "")
		scoreScoreListScoresFlag    = scoreScoreListFlags.String("scores", "", "")
		scoreScoreListSubjectFlag   = scoreScoreListFlags.String("subject", "", "")

		scoreScoreDetailFlags  = flag.NewFlagSet("score-detail", flag.ExitOnError)
		scoreScoreDetailIDFlag = scoreScoreDetailFlags.String("id", "REQUIRED", "id")
	)
	scoreFlags.Usage = scoreUsage
	scoreUploadFlags.Usage = scoreUploadUsage
	scoreScoreListFlags.Usage = scoreScoreListUsage
	scoreScoreDetailFlags.Usage = scoreScoreDetailUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "score":
			svcf = scoreFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "score":
			switch epn {
			case "upload":
				epf = scoreUploadFlags

			case "score-list":
				epf = scoreScoreListFlags

			case "score-detail":
				epf = scoreScoreDetailFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "score":
			c := scorec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "upload":
				endpoint = c.Upload()
				data, err = scorec.BuildUploadPayload(*scoreUploadContentTypeFlag)
				if err == nil {
					data, err = scorec.BuildUploadStreamPayload(data, *scoreUploadStreamFlag)
				}
			case "score-list":
				endpoint = c.ScoreList()
				data, err = scorec.BuildScoreListPayload(*scoreScoreListSortFieldFlag, *scoreScoreListCursorFlag, *scoreScoreListLimitFlag, *scoreScoreListSortOrderFlag, *scoreScoreListNameFlag, *scoreScoreListClassFlag, *scoreScoreListScoresFlag, *scoreScoreListSubjectFlag)
			case "score-detail":
				endpoint = c.ScoreDetail()
				data, err = scorec.BuildScoreDetailPayload(*scoreScoreDetailIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// scoreUsage displays the usage of the score command and its subcommands.
func scoreUsage() {
	fmt.Fprintf(os.Stderr, `成绩系统
Usage:
    %s [globalflags] score COMMAND [flags]

COMMAND:
    upload: 上传学生成绩文件
    score-list: 成绩列表
    score-detail: 成绩详情

Additional help:
    %s score COMMAND --help
`, os.Args[0], os.Args[0])
}
func scoreUploadUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] score upload -content-type STRING -stream STRING

上传学生成绩文件
    -content-type STRING: 
    -stream STRING: path to file containing the streamed request body

Example:
    `+os.Args[0]+` score upload --content-type "multipart/form-data; boundary=goa" --stream "goa.png"
`, os.Args[0])
}

func scoreScoreListUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] score score-list -sort-field STRING -cursor INT -limit INT -sort-order STRING -name STRING -class STRING -scores INT -subject STRING

成绩列表
    -sort-field STRING: 
    -cursor INT: 
    -limit INT: 
    -sort-order STRING: 
    -name STRING: 
    -class STRING: 
    -scores INT: 
    -subject STRING: 

Example:
    `+os.Args[0]+` score score-list --sort-field "name" --cursor 0 --limit 20 --sort-order "asc" --name "Accusantium molestias quis." --class "Cumque repudiandae eius id possimus." --scores 9099242310088826943 --subject "Aut enim."
`, os.Args[0])
}

func scoreScoreDetailUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] score score-detail -id INT

成绩详情
    -id INT: id

Example:
    `+os.Args[0]+` score score-detail --id 1
`, os.Args[0])
}
